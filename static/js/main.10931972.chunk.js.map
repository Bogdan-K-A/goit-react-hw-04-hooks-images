{"version":3,"sources":["Component/ImageGalleryItem/ImageGalleryItem.module.css","Component/Button/Button.module.css","Component/Modal/Modal.module.css","Component/ImageGallery/ImageGallery.module.css","Component/Searchbar/Searchbar.module.css","Component/Searchbar/Searchbar.js","Component/Spinner/Spinner.js","Component/ImageGalleryItem/ImageGalleryItem.js","Component/ImageGallery/ImageGallery.js","Servise/imagesApi.js","Component/Button/Button.js","Component/Modal/Modal.js","Component/helper/mapper.js","App.js","index.js"],"names":["module","exports","Searchbar","onSubmit","useState","searchinput","setSearchinput","className","s","SearchForm","e","preventDefault","trim","toast","error","type","SearchFormButton","style","width","height","SearchFormButtonLabel","SearchFormInput","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","Spinner","color","ImageGalleryItem","imgSrc","imgUrl","onModalOpen","onClick","src","alt","ImageGalleryItemImage","ImageGallery","result","map","id","webformatURL","largeImageURL","imagesApi","imagesName","numPage","params","fetch","then","response","ok","json","Promise","reject","Error","Button","onLoadMore","Center","Modal","largImageURL","useEffect","window","addEventListener","closeModal","code","Overlay","mapper","images","App","setError","status","setStatus","page","setPage","setResult","setLargImageURL","imgFatchApi","fetchAPI","total","MapperApi","hits","handleSroll","catch","finally","scrollTo","top","document","documentElement","scrollHeight","behavior","length","url","autoClose","position","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.10931972.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItem\":\"ImageGalleryItem_ImageGalleryItem__1Jz86\",\"ImageGalleryItemImage\":\"ImageGalleryItem_ImageGalleryItemImage___-s8y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2WKLr\",\"Center\":\"Button_Center__2gw-j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__2sXuW\",\"Modal\":\"Modal_Modal__31gvd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__1M3kO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__2NGdY\",\"SearchForm\":\"Searchbar_SearchForm__1VboS\",\"SearchFormButton\":\"Searchbar_SearchFormButton__lzsv9\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__1Y8ku\",\"SearchFormInput\":\"Searchbar_SearchFormInput__10i9d\"};","import { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { ImSearch } from 'react-icons/im'\r\nimport s from './Searchbar.module.css'\r\n\r\nfunction Searchbar({ onSubmit }) {\r\n  const [searchinput, setSearchinput] = useState('')\r\n\r\n  /* ---------------------------- Отслеживает запрос в инпуте --------------------------- */\r\n  const handelNameImg = (e) => {\r\n    const { value } = e.currentTarget\r\n    setSearchinput(value.toLowerCase())\r\n  }\r\n\r\n  /* ----------------------------- запрос в сабмит и запись в state---------------------------- */\r\n  const handelSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    /* ---------------- если инпут пустой выпадет предупреждение ---------------- */\r\n    if (searchinput.trim() === '') {\r\n      return toast.error('Введите запрос')\r\n    }\r\n    onSubmit(searchinput)\r\n    /* ------------------- очистка инпута посне нажатия кнопки ------------------ */\r\n    setSearchinput('')\r\n  }\r\n\r\n  return (\r\n    <header className={s.Searchbar}>\r\n      <form className={s.SearchForm} onSubmit={handelSubmit}>\r\n        <button type=\"submit\" className={s.SearchFormButton}>\r\n          <ImSearch style={{ width: 20, height: 20 }} />\r\n          <span className={s.SearchFormButtonLabel}>Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className={s.SearchFormInput}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          value={searchinput}\r\n          onChange={handelNameImg}\r\n        />\r\n      </form>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Searchbar\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n}\r\n","import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div>\r\n      <Loader type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80} />\r\n    </div>\r\n  )\r\n}\r\nexport default Spinner\r\n","import PropTypes from 'prop-types'\r\nimport s from './ImageGalleryItem.module.css'\r\n\r\n/* ------------------------ пропсы приходят через ImageGallery------------------------ */\r\n\r\nfunction ImageGalleryItem({ imgSrc, imgUrl, onModalOpen }) {\r\n  return (\r\n    <li\r\n      className={s.ImageGalleryItem}\r\n      onClick={() => {\r\n        onModalOpen(imgUrl)\r\n      }}\r\n    >\r\n      <img src={imgSrc} alt=\"\" className={s.ImageGalleryItemImage} />\r\n    </li>\r\n  )\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  imgSrc: PropTypes.string.isRequired,\r\n  imgUrl: PropTypes.string.isRequired,\r\n  onModalOpen: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ImageGalleryItem\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport s from './ImageGallery.module.css'\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem'\r\n\r\n/* --------------------------- result приходит из handelSearchSubmitForm--------------------------- */\r\nfunction ImageGallery({ onModalOpen, result }) {\r\n  // console.log(result)\r\n  return (\r\n    <ul className={s.ImageGallery}>\r\n      {/* достаём из массива result нужные элементы и передаём в item  */}\r\n      {result.map(({ id, webformatURL, largeImageURL }) => (\r\n        <ImageGalleryItem\r\n          key={id}\r\n          imgUrl={largeImageURL}\r\n          imgSrc={webformatURL}\r\n          onModalOpen={onModalOpen}\r\n        />\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  onModalOpen: PropTypes.func.isRequired,\r\n  result: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      largeImageURL: PropTypes.string.isRequired,\r\n      webformatURL: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n}\r\n\r\nexport default ImageGallery\r\n","/* -------------- Аргументы принимают значения которые приходят из компонента App через вызванную функцию fetchAPI------------- */\r\n\r\nfunction imagesApi(imagesName, numPage) {\r\n  // console.log(imagesName)\r\n  // console.log(numPage)\r\n  const API_KEY = '23996907-65b7baf3ba7389d44636c5d9e'\r\n  const BASE_URL = `https://pixabay.com/api/`\r\n  const params = `?q=${imagesName}&page=${numPage}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`\r\n\r\n  const URL = BASE_URL + params\r\n\r\n  return fetch(URL).then((response) => {\r\n    if (response.ok) {\r\n      return response.json()\r\n    }\r\n    return Promise.reject(new Error(`Такого названия ${imagesName} нет`))\r\n  })\r\n}\r\n\r\nexport default imagesApi\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport s from './Button.module.css'\r\n\r\n/* -------------------------- пропс onLoadMore приходит из App ------------------------- */\r\nconst Button = ({ onLoadMore }) => {\r\n  return (\r\n    <div className={s.Center}>\r\n      <button className={s.Button} type=\"button\" onClick={onLoadMore}>\r\n        Загрузить ещё\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  onLoadMore: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Button\r\n","import { useEffect } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport s from './Modal.module.css'\r\n\r\nexport default function Modal({ onClick, largImageURL }) {\r\n  /* ------------------------- методы жизненного цикла в которые записаны слушатели событий ------------------------ */\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', closeModal)\r\n    return () => {\r\n      window.addEventListener('keydown', closeModal)\r\n    }\r\n  })\r\n\r\n  /* ------------- функция закрытия модалки по нажатию на Escape переданная через пропс ------------ */\r\n  const closeModal = (e) => {\r\n    if (e.code === 'Escape') {\r\n      onClick()\r\n    }\r\n  }\r\n  return (\r\n    <div className={s.Overlay} onClick={onClick}>\r\n      <div className={s.Modal}>\r\n        <img src={largImageURL} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nModal.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  largImageURL: PropTypes.string.isRequired,\r\n}\r\n","/* --------------------------------- Маппер является вспомогательной функцией которая обрабатывает то что приходит из response.json() --------------------------------- */\r\n\r\nconst mapper = (images) => {\r\n  // console.log(images)\r\n  return images.map(({ id, webformatURL, largeImageURL }) => ({\r\n    id,\r\n    webformatURL,\r\n    largeImageURL,\r\n  }))\r\n}\r\n\r\nexport default mapper\r\n","import { useState, useEffect } from 'react'\r\nimport { ToastContainer } from 'react-toastify'\r\nimport Searchbar from './Component/Searchbar/Searchbar'\r\nimport Spinner from './Component/Spinner/Spinner'\r\nimport ImageGallery from './Component/ImageGallery/ImageGallery'\r\nimport fetchAPI from '../src/Servise/imagesApi'\r\nimport Button from './Component/Button/Button'\r\nimport Modal from './Component/Modal/Modal'\r\nimport MapperApi from './Component/helper/mapper'\r\n\r\nexport default function App() {\r\n  const [searchinput, setSearchinput] = useState('')\r\n  const [error, setError] = useState('')\r\n  const [status, setStatus] = useState('idle')\r\n  const [page, setPage] = useState(1)\r\n  const [result, setResult] = useState([])\r\n  const [largImageURL, setLargImageURL] = useState('')\r\n\r\n  /* -------------------- Сравнение запроса при  обновлении ------------------- */\r\n  useEffect(() => {\r\n    if (!searchinput || !page) {\r\n      return\r\n    }\r\n    imgFatchApi()\r\n  }, [searchinput, page])\r\n\r\n  /* -------------------------- функция фетч запроса -------------------------- */\r\n  const imgFatchApi = () => {\r\n    setStatus('pending')\r\n    /* ------------------- передаём в функцию два аргумента которые будут передавать значения imagesApi ------------------ */\r\n    fetchAPI(searchinput, page)\r\n      /* ---------------- В аргумент then вписываем произволное имя в это имя передаётся response.json() --------------- */\r\n      .then((images) => {\r\n        if (images.total === 0) {\r\n          setError(`Нет картинок по запросу ${searchinput}`)\r\n          setStatus('rejected')\r\n        } else {\r\n          setResult((result) => [...result, ...MapperApi(images.hits)])\r\n\r\n          /* ---------------- проскроливает после нажатия загрузить ещё --------------- */\r\n          handleSroll()\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setError(error)\r\n        setStatus('rejected')\r\n      })\r\n      .finally(() => {\r\n        setStatus('rejected')\r\n      })\r\n  }\r\n\r\n  /* ------------------------ Функция прокрутки ------------------------ */\r\n  const handleSroll = () => {\r\n    window.scrollTo({\r\n      top: document.documentElement.scrollHeight,\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n  /* ------------------------ Функция открытия модалки ------------------------ */\r\n  // передаём в функцию аргумент url в который будет записан пропс в компоненте модалки\r\n  const handelOpenModal = (url) => {\r\n    setLargImageURL(url)\r\n  }\r\n\r\n  /* ------------------------ функция закрытия модалки ------------------------ */\r\n  const handelCloseModal = () => {\r\n    setLargImageURL('')\r\n  }\r\n\r\n  /* ------------------------- функция запроса в форме ------------------------- */\r\n  const handelSearchSubmitForm = (imagesName) => {\r\n    /* -------------- очищает поля стейта перед следующим запросом -------------- */\r\n    return setSearchinput(imagesName), setResult([]), setPage(1)\r\n  }\r\n\r\n  /* ---------------------- Функция кнопки загрузить ещё ---------------------- */\r\n  const handelLoadMore = () => {\r\n    /* ----------------- добавляет новую страницу к существующей ---------------- */\r\n    setPage(page + 1)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Searchbar onSubmit={handelSearchSubmitForm} />\r\n\r\n      {status === 'pending' && <Spinner />}\r\n\r\n      {result.length > 0 && (\r\n        <>\r\n          <ImageGallery onModalOpen={handelOpenModal} result={result} />\r\n          <Button onLoadMore={handelLoadMore} />\r\n        </>\r\n      )}\r\n\r\n      {largImageURL && (\r\n        <Modal largImageURL={largImageURL} onClick={handelCloseModal} />\r\n      )}\r\n\r\n      {error && <p>{error}</p>}\r\n\r\n      <ToastContainer autoClose={3000} position=\"top-center\" />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}